//OpenMP version.  Edit and submit only this file.
/* Enter your details below
 * Name : Samritha Nagesh
 * UCLA ID : 505-104-679
 * Email : samrithanagesh@g.ucla.edu
 */

#include <stdlib.h>
#include <stdio.h>
#include <omp.h>

#include "utils.h"

void work_it_par(long *old, long *new) {
  int i, j, k, ijkSum;
  int u, v, w;
  long compute_it;
  long aggregate=1.0;

  long DIMSQ = DIM*DIM;
  long iDIM, jDIM, ijSum;

  //Second Loop
  long uSum, vSum, wSum, tempNew;
  long u0, u1, u2, u3, u4, u5, u6, u7, u8, u9 = 0;

#pragma omp parallel num_threads(16) private (u,compute_it,j,k,iDIM,jDIM,ijSum, ijkSum) reduction(+:aggregate, tempNew) reduction(+:u0,u1,u2,u3,u4,u5,u6,u7,u8,u9)
  for (i=1; i<DIM-1; i++) {
    iDIM=i*DIMSQ;
    for (j=1; j<DIM-1; j++) {
      jDIM=j*DIM;
      ijSum = iDIM + jDIM;
      for (k=1; k<DIM-1; k++) {
	ijkSum = ijSum+k;
        compute_it = old[ijkSum] * we_need_the_func();
        aggregate+= compute_it / gimmie_the_func();

	tempNew = 0;
	
	//u = -1
	tempNew+=old[ijkSum-DIMSQ-DIM-1];
	tempNew+=old[ijkSum-DIMSQ-DIM];
	tempNew+=old[ijkSum-DIMSQ-DIM+1];

	tempNew+=old[ijkSum-DIMSQ-1];
	tempNew+=old[ijkSum-DIMSQ];
	tempNew+=old[ijkSum-DIMSQ+1];

	tempNew+=old[ijkSum-DIMSQ+DIM-1];
	tempNew+=old[ijkSum-DIMSQ+DIM];
	tempNew+=old[ijkSum-DIMSQ+DIM+1];
	
	//u = 0
	tempNew+=old[ijkSum-DIM-1];
	tempNew+=old[ijkSum-DIM];
	tempNew+=old[ijkSum-DIM+1];

	tempNew+=old[ijkSum-1];
	tempNew+=old[ijkSum];
	tempNew+=old[ijkSum+1];
	
	tempNew+=old[ijkSum+DIM-1];
	tempNew+=old[ijkSum+DIM];
	tempNew+=old[ijkSum+DIM+1];

	//u = 1
	tempNew+=old[ijkSum+DIMSQ-DIM-1];
	tempNew+=old[ijkSum+DIMSQ-DIM];
	tempNew+=old[ijkSum+DIMSQ-DIM+1];
	
	tempNew+=old[ijkSum+DIMSQ-1];
	tempNew+=old[ijkSum+DIMSQ];
	tempNew+=old[ijkSum+DIMSQ+1];

	tempNew+=old[ijkSum+DIMSQ+DIM-1];
	tempNew+=old[ijkSum+DIMSQ+DIM];
	tempNew+=old[ijkSum+DIMSQ+DIM+1];

	tempNew/=27;
	new[ijkSum] = tempNew;
	u = (tempNew/100);
	
	if(u<=0) u0++;
        if(u==1) u1++;
        if(u==2) u2++;
        if(u==3) u3++;
        if(u==4) u4++;
        if(u==5) u5++;
        if(u==6) u6++;
        if(u==7) u7++;
        if(u==8) u8++;
        if(u>=9) u9++;
      }
    }
  }

  printf("AGGR:%ld\n",aggregate);

  histogrammy[0] = u0;
  histogrammy[1] = u1;
  histogrammy[2] = u2;
  histogrammy[3] = u3;
  histogrammy[4] = u4;
  histogrammy[5] = u5;
  histogrammy[6] = u6;
  histogrammy[7] = u7;
  histogrammy[8] = u8;
  histogrammy[9] = u9;
 
}

